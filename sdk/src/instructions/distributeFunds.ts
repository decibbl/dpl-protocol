/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u64,
  u8,
} from "@metaplex-foundation/umi/serializers";
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from "../shared";

// Accounts.
export type DistributeFundsInstructionAccounts = {
  /** platform account */
  platform: PublicKey | Pda;
  /** artist account */
  artist: PublicKey | Pda;
  /** update authority */
  authority?: Signer;
  platformAuthority: PublicKey | Pda;
  /** mint account of a token that platform wants to support */
  tokenMint: PublicKey | Pda;
  /** token account of respective mint given above */
  tokenAccount: PublicKey | Pda;
  /** token account of respective mint given above of artist */
  artistTokenAccount: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram: PublicKey | Pda;
};

// Data.
export type DistributeFundsInstructionData = {
  discriminator: Array<number>;
  amount: bigint;
};

export type DistributeFundsInstructionDataArgs = { amount: number | bigint };

export function getDistributeFundsInstructionDataSerializer(): Serializer<
  DistributeFundsInstructionDataArgs,
  DistributeFundsInstructionData
> {
  return mapSerializer<
    DistributeFundsInstructionDataArgs,
    any,
    DistributeFundsInstructionData
  >(
    struct<DistributeFundsInstructionData>(
      [
        ["discriminator", array(u8(), { size: 8 })],
        ["amount", u64()],
      ],
      { description: "DistributeFundsInstructionData" }
    ),
    (value) => ({
      ...value,
      discriminator: [124, 82, 187, 45, 224, 209, 31, 156],
    })
  ) as Serializer<
    DistributeFundsInstructionDataArgs,
    DistributeFundsInstructionData
  >;
}

// Args.
export type DistributeFundsInstructionArgs = DistributeFundsInstructionDataArgs;

// Instruction.
export function distributeFunds(
  context: Pick<Context, "identity" | "programs">,
  input: DistributeFundsInstructionAccounts & DistributeFundsInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "dplProtocol",
    "ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art"
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    platform: { index: 0, isWritable: false, value: input.platform ?? null },
    artist: { index: 1, isWritable: false, value: input.artist ?? null },
    authority: { index: 2, isWritable: true, value: input.authority ?? null },
    platformAuthority: {
      index: 3,
      isWritable: false,
      value: input.platformAuthority ?? null,
    },
    tokenMint: { index: 4, isWritable: false, value: input.tokenMint ?? null },
    tokenAccount: {
      index: 5,
      isWritable: true,
      value: input.tokenAccount ?? null,
    },
    artistTokenAccount: {
      index: 6,
      isWritable: true,
      value: input.artistTokenAccount ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 8,
      isWritable: false,
      value: input.associatedTokenProgram ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: DistributeFundsInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    "programId",
    programId
  );

  // Data.
  const data = getDistributeFundsInstructionDataSerializer().serialize(
    resolvedArgs as DistributeFundsInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
