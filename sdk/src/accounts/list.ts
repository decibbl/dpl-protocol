/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  bool,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from "@metaplex-foundation/umi/serializers";

export type List = Account<ListAccountData>;

export type ListAccountData = {
  discriminator: Array<number>;
  /** authority who is listing */
  authority: PublicKey;
  /** timestamp of when fractionalized subscription starts */
  startTimestamp: bigint;
  /** listing price */
  price: bigint;
  /** chosen token mint from platform supported tokens */
  paymentMint: PublicKey;
  /** user token account of chosen payment mint */
  tokenAccount: PublicKey;
  /** minted subscriber nft */
  mint: PublicKey;
  /** is listed nft claimable */
  isClaimable: boolean;
  buyer: Option<PublicKey>;
};

export type ListAccountDataArgs = {
  /** authority who is listing */
  authority: PublicKey;
  /** timestamp of when fractionalized subscription starts */
  startTimestamp: number | bigint;
  /** listing price */
  price: number | bigint;
  /** chosen token mint from platform supported tokens */
  paymentMint: PublicKey;
  /** user token account of chosen payment mint */
  tokenAccount: PublicKey;
  /** minted subscriber nft */
  mint: PublicKey;
  /** is listed nft claimable */
  isClaimable: boolean;
  buyer: OptionOrNullable<PublicKey>;
};

export function getListAccountDataSerializer(): Serializer<
  ListAccountDataArgs,
  ListAccountData
> {
  return mapSerializer<ListAccountDataArgs, any, ListAccountData>(
    struct<ListAccountData>(
      [
        ["discriminator", array(u8(), { size: 8 })],
        ["authority", publicKeySerializer()],
        ["startTimestamp", i64()],
        ["price", u64()],
        ["paymentMint", publicKeySerializer()],
        ["tokenAccount", publicKeySerializer()],
        ["mint", publicKeySerializer()],
        ["isClaimable", bool()],
        ["buyer", option(publicKeySerializer())],
      ],
      { description: "ListAccountData" }
    ),
    (value) => ({
      ...value,
      discriminator: [169, 24, 186, 110, 22, 139, 190, 82],
    })
  ) as Serializer<ListAccountDataArgs, ListAccountData>;
}

export function deserializeList(rawAccount: RpcAccount): List {
  return deserializeAccount(rawAccount, getListAccountDataSerializer());
}

export async function fetchList(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<List> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, "List");
  return deserializeList(maybeAccount);
}

export async function safeFetchList(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<List | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeList(maybeAccount) : null;
}

export async function fetchAllList(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<List[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "List");
    return deserializeList(maybeAccount);
  });
}

export async function safeFetchAllList(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<List[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeList(maybeAccount as RpcAccount));
}

export function getListGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "dplProtocol",
    "ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art"
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      startTimestamp: number | bigint;
      price: number | bigint;
      paymentMint: PublicKey;
      tokenAccount: PublicKey;
      mint: PublicKey;
      isClaimable: boolean;
      buyer: OptionOrNullable<PublicKey>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      startTimestamp: [40, i64()],
      price: [48, u64()],
      paymentMint: [56, publicKeySerializer()],
      tokenAccount: [88, publicKeySerializer()],
      mint: [120, publicKeySerializer()],
      isClaimable: [152, bool()],
      buyer: [153, option(publicKeySerializer())],
    })
    .deserializeUsing<List>((account) => deserializeList(account))
    .whereField("discriminator", [169, 24, 186, 110, 22, 139, 190, 82]);
}

export function findListPda(
  context: Pick<Context, "eddsa" | "programs">,
  seeds: {
    authority: PublicKey;

    listingStartsAt: number | bigint;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    "dplProtocol",
    "ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art"
  );
  return context.eddsa.findPda(programId, [
    string({ size: "variable" }).serialize("list"),
    publicKeySerializer().serialize(seeds.authority),
    i64().serialize(seeds.listingStartsAt),
  ]);
}

export async function fetchListFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findListPda>[1],
  options?: RpcGetAccountOptions
): Promise<List> {
  return fetchList(context, findListPda(context, seeds), options);
}

export async function safeFetchListFromSeeds(
  context: Pick<Context, "eddsa" | "programs" | "rpc">,
  seeds: Parameters<typeof findListPda>[1],
  options?: RpcGetAccountOptions
): Promise<List | null> {
  return safeFetchList(context, findListPda(context, seeds), options);
}
