/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from "@metaplex-foundation/umi/serializers";
import {
  SubscriptionPlan,
  SubscriptionPlanArgs,
  getSubscriptionPlanSerializer,
} from ".";

export type SubscriptionDetails = {
  /** mint account of supported SPL Token */
  mint: PublicKey;
  /**
   * pool token account where
   * royalties will be distributed
   */
  tokenAccount: PublicKey;
  /**
   * decimals above mint
   * (to save extra rpc calls to just get decimals )
   */
  decimals: number;
  /** subscription plans w.r.t above mint */
  subscriptionPlans: Array<SubscriptionPlan>;
};

export type SubscriptionDetailsArgs = {
  /** mint account of supported SPL Token */
  mint: PublicKey;
  /**
   * pool token account where
   * royalties will be distributed
   */
  tokenAccount: PublicKey;
  /**
   * decimals above mint
   * (to save extra rpc calls to just get decimals )
   */
  decimals: number;
  /** subscription plans w.r.t above mint */
  subscriptionPlans: Array<SubscriptionPlanArgs>;
};

export function getSubscriptionDetailsSerializer(): Serializer<
  SubscriptionDetailsArgs,
  SubscriptionDetails
> {
  return struct<SubscriptionDetails>(
    [
      ["mint", publicKeySerializer()],
      ["tokenAccount", publicKeySerializer()],
      ["decimals", u8()],
      ["subscriptionPlans", array(getSubscriptionPlanSerializer())],
    ],
    { description: "SubscriptionDetails" }
  ) as Serializer<SubscriptionDetailsArgs, SubscriptionDetails>;
}
