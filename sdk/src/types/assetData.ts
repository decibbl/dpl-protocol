/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  bool,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
} from "@metaplex-foundation/umi/serializers";
import {
  CollectionDetails,
  CollectionDetailsArgs,
  Creator,
  CreatorArgs,
  MCollection,
  MCollectionArgs,
  MUses,
  MUsesArgs,
  TokenStandard,
  TokenStandardArgs,
  getCollectionDetailsSerializer,
  getCreatorSerializer,
  getMCollectionSerializer,
  getMUsesSerializer,
  getTokenStandardSerializer,
} from ".";

/** Data representation of an asset. */
export type AssetData = {
  /** The name of the asset. */
  name: string;
  /** The symbol for the asset. */
  symbol: string;
  /** URI pointing to JSON representing the asset. */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000). */
  sellerFeeBasisPoints: number;
  /** Array of creators. */
  creators: Option<Array<Creator>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  /** Type of the token. */
  tokenStandard: TokenStandard;
  /** Collection information. */
  collection: Option<MCollection>;
  /** Uses information. */
  uses: Option<MUses>;
  /** Collection item details. */
  collectionDetails: Option<CollectionDetails>;
  /** Programmable rule set for the asset. */
  ruleSet: Option<PublicKey>;
};

export type AssetDataArgs = {
  /** The name of the asset. */
  name: string;
  /** The symbol for the asset. */
  symbol: string;
  /** URI pointing to JSON representing the asset. */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000). */
  sellerFeeBasisPoints: number;
  /** Array of creators. */
  creators: OptionOrNullable<Array<CreatorArgs>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  /** Type of the token. */
  tokenStandard: TokenStandardArgs;
  /** Collection information. */
  collection: OptionOrNullable<MCollectionArgs>;
  /** Uses information. */
  uses: OptionOrNullable<MUsesArgs>;
  /** Collection item details. */
  collectionDetails: OptionOrNullable<CollectionDetailsArgs>;
  /** Programmable rule set for the asset. */
  ruleSet: OptionOrNullable<PublicKey>;
};

export function getAssetDataSerializer(): Serializer<AssetDataArgs, AssetData> {
  return struct<AssetData>(
    [
      ["name", string()],
      ["symbol", string()],
      ["uri", string()],
      ["sellerFeeBasisPoints", u16()],
      ["creators", option(array(getCreatorSerializer()))],
      ["primarySaleHappened", bool()],
      ["isMutable", bool()],
      ["tokenStandard", getTokenStandardSerializer()],
      ["collection", option(getMCollectionSerializer())],
      ["uses", option(getMUsesSerializer())],
      ["collectionDetails", option(getCollectionDetailsSerializer())],
      ["ruleSet", option(publicKeySerializer())],
    ],
    { description: "AssetData" }
  ) as Serializer<AssetDataArgs, AssetData>;
}
