/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  SubscriptionDetails,
  SubscriptionDetailsArgs,
  getSubscriptionDetailsSerializer,
} from '../types';

export type Platform = Account<PlatformAccountData>;

export type PlatformAccountData = {
  discriminator: Array<number>;
  /** authority to update the account */
  authority: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /**
   * non-transferable mint account acts as
   * collection NFT & verifies artist's mints
   */
  artistMint: PublicKey;
  /**
   * non-transferable mint account acts as
   * collection NFT & verifies user's mints
   */
  userMint: PublicKey;
  /** platform's domain address */
  domain: string;
  /** subscription details */
  subscriptionDetails: Array<SubscriptionDetails>;
};

export type PlatformAccountDataArgs = {
  /** authority to update the account */
  authority: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /**
   * non-transferable mint account acts as
   * collection NFT & verifies artist's mints
   */
  artistMint: PublicKey;
  /**
   * non-transferable mint account acts as
   * collection NFT & verifies user's mints
   */
  userMint: PublicKey;
  /** platform's domain address */
  domain: string;
  /** subscription details */
  subscriptionDetails: Array<SubscriptionDetailsArgs>;
};

export function getPlatformAccountDataSerializer(): Serializer<
  PlatformAccountDataArgs,
  PlatformAccountData
> {
  return mapSerializer<PlatformAccountDataArgs, any, PlatformAccountData>(
    struct<PlatformAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['authority', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['artistMint', publicKeySerializer()],
        ['userMint', publicKeySerializer()],
        ['domain', string()],
        ['subscriptionDetails', array(getSubscriptionDetailsSerializer())],
      ],
      { description: 'PlatformAccountData' }
    ),
    (value) => ({ ...value, discriminator: [77, 92, 204, 58, 187, 98, 91, 12] })
  ) as Serializer<PlatformAccountDataArgs, PlatformAccountData>;
}

export function deserializePlatform(rawAccount: RpcAccount): Platform {
  return deserializeAccount(rawAccount, getPlatformAccountDataSerializer());
}

export async function fetchPlatform(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Platform> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Platform');
  return deserializePlatform(maybeAccount);
}

export async function safeFetchPlatform(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Platform | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePlatform(maybeAccount) : null;
}

export async function fetchAllPlatform(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Platform[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Platform');
    return deserializePlatform(maybeAccount);
  });
}

export async function safeFetchAllPlatform(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Platform[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePlatform(maybeAccount as RpcAccount));
}

export function getPlatformGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'dplProtocol',
    'ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      mint: PublicKey;
      artistMint: PublicKey;
      userMint: PublicKey;
      domain: string;
      subscriptionDetails: Array<SubscriptionDetailsArgs>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      artistMint: [72, publicKeySerializer()],
      userMint: [104, publicKeySerializer()],
      domain: [136, string()],
      subscriptionDetails: [null, array(getSubscriptionDetailsSerializer())],
    })
    .deserializeUsing<Platform>((account) => deserializePlatform(account))
    .whereField('discriminator', [77, 92, 204, 58, 187, 98, 91, 12]);
}
