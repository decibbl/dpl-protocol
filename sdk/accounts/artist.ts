/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  PlatformDetails,
  PlatformDetailsArgs,
  getPlatformDetailsSerializer,
} from '../types';

export type Artist = Account<ArtistAccountData>;

export type ArtistAccountData = {
  discriminator: Array<number>;
  /** authority to update the account */
  authority: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /** platforms artist is part of */
  platforms: PlatformDetails;
};

export type ArtistAccountDataArgs = {
  /** authority to update the account */
  authority: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /** platforms artist is part of */
  platforms: PlatformDetailsArgs;
};

export function getArtistAccountDataSerializer(): Serializer<
  ArtistAccountDataArgs,
  ArtistAccountData
> {
  return mapSerializer<ArtistAccountDataArgs, any, ArtistAccountData>(
    struct<ArtistAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['authority', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['platforms', getPlatformDetailsSerializer()],
      ],
      { description: 'ArtistAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [142, 136, 31, 244, 208, 44, 128, 145],
    })
  ) as Serializer<ArtistAccountDataArgs, ArtistAccountData>;
}

export function deserializeArtist(rawAccount: RpcAccount): Artist {
  return deserializeAccount(rawAccount, getArtistAccountDataSerializer());
}

export async function fetchArtist(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Artist> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Artist');
  return deserializeArtist(maybeAccount);
}

export async function safeFetchArtist(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Artist | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeArtist(maybeAccount) : null;
}

export async function fetchAllArtist(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Artist[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Artist');
    return deserializeArtist(maybeAccount);
  });
}

export async function safeFetchAllArtist(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Artist[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeArtist(maybeAccount as RpcAccount));
}

export function getArtistGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'dplProtocol',
    'ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      mint: PublicKey;
      platforms: PlatformDetailsArgs;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      platforms: [72, getPlatformDetailsSerializer()],
    })
    .deserializeUsing<Artist>((account) => deserializeArtist(account))
    .whereField('discriminator', [142, 136, 31, 244, 208, 44, 128, 145]);
}

export function getArtistSize(): number {
  return 136;
}
