/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { Uses, UsesArgs, getUsesSerializer } from '../types';

export type Artwork = Account<ArtworkAccountData>;

export type ArtworkAccountData = {
  discriminator: Array<number>;
  /** artist PDA address */
  artist: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /**
   * incremented periodically by the platform
   * as per its requirements
   */
  uses: Uses;
  /**
   * collection PDA address if
   * artwork is part of collection
   */
  collection: Option<PublicKey>;
  /**
   * platform addresses the artwork is part of,
   * if artwork is part if collection
   * i.e if above address is added then
   * collection's platforms will take precedence
   */
  platforms: Array<PublicKey>;
};

export type ArtworkAccountDataArgs = {
  /** artist PDA address */
  artist: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /**
   * incremented periodically by the platform
   * as per its requirements
   */
  uses: UsesArgs;
  /**
   * collection PDA address if
   * artwork is part of collection
   */
  collection: OptionOrNullable<PublicKey>;
  /**
   * platform addresses the artwork is part of,
   * if artwork is part if collection
   * i.e if above address is added then
   * collection's platforms will take precedence
   */
  platforms: Array<PublicKey>;
};

export function getArtworkAccountDataSerializer(): Serializer<
  ArtworkAccountDataArgs,
  ArtworkAccountData
> {
  return mapSerializer<ArtworkAccountDataArgs, any, ArtworkAccountData>(
    struct<ArtworkAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['artist', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['uses', getUsesSerializer()],
        ['collection', option(publicKeySerializer())],
        ['platforms', array(publicKeySerializer())],
      ],
      { description: 'ArtworkAccountData' }
    ),
    (value) => ({ ...value, discriminator: [18, 146, 190, 9, 4, 164, 2, 47] })
  ) as Serializer<ArtworkAccountDataArgs, ArtworkAccountData>;
}

export function deserializeArtwork(rawAccount: RpcAccount): Artwork {
  return deserializeAccount(rawAccount, getArtworkAccountDataSerializer());
}

export async function fetchArtwork(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Artwork> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Artwork');
  return deserializeArtwork(maybeAccount);
}

export async function safeFetchArtwork(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Artwork | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeArtwork(maybeAccount) : null;
}

export async function fetchAllArtwork(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Artwork[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Artwork');
    return deserializeArtwork(maybeAccount);
  });
}

export async function safeFetchAllArtwork(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Artwork[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeArtwork(maybeAccount as RpcAccount));
}

export function getArtworkGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'dplProtocol',
    'ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      artist: PublicKey;
      mint: PublicKey;
      uses: UsesArgs;
      collection: OptionOrNullable<PublicKey>;
      platforms: Array<PublicKey>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      artist: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      uses: [72, getUsesSerializer()],
      collection: [88, option(publicKeySerializer())],
      platforms: [null, array(publicKeySerializer())],
    })
    .deserializeUsing<Artwork>((account) => deserializeArtwork(account))
    .whereField('discriminator', [18, 146, 190, 9, 4, 164, 2, 47]);
}
