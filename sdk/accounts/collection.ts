/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Collection = Account<CollectionAccountData>;

export type CollectionAccountData = {
  discriminator: Array<number>;
  /** artist PDA address */
  artist: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /** platforms the collection is part of */
  platforms: Array<PublicKey>;
};

export type CollectionAccountDataArgs = {
  /** artist PDA address */
  artist: PublicKey;
  /** non-transferable mint account */
  mint: PublicKey;
  /** platforms the collection is part of */
  platforms: Array<PublicKey>;
};

export function getCollectionAccountDataSerializer(): Serializer<
  CollectionAccountDataArgs,
  CollectionAccountData
> {
  return mapSerializer<CollectionAccountDataArgs, any, CollectionAccountData>(
    struct<CollectionAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['artist', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['platforms', array(publicKeySerializer())],
      ],
      { description: 'CollectionAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [48, 160, 232, 205, 191, 207, 26, 141],
    })
  ) as Serializer<CollectionAccountDataArgs, CollectionAccountData>;
}

export function deserializeCollection(rawAccount: RpcAccount): Collection {
  return deserializeAccount(rawAccount, getCollectionAccountDataSerializer());
}

export async function fetchCollection(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Collection> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Collection');
  return deserializeCollection(maybeAccount);
}

export async function safeFetchCollection(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Collection | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeCollection(maybeAccount) : null;
}

export async function fetchAllCollection(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Collection[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Collection');
    return deserializeCollection(maybeAccount);
  });
}

export async function safeFetchAllCollection(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Collection[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCollection(maybeAccount as RpcAccount));
}

export function getCollectionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'dplProtocol',
    'ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      artist: PublicKey;
      mint: PublicKey;
      platforms: Array<PublicKey>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      artist: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      platforms: [72, array(publicKeySerializer())],
    })
    .deserializeUsing<Collection>((account) => deserializeCollection(account))
    .whereField('discriminator', [48, 160, 232, 205, 191, 207, 26, 141]);
}
