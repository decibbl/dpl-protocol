/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  SubscriptionPlan,
  SubscriptionPlanArgs,
  getSubscriptionPlanSerializer,
} from '../types';

// Accounts.
export type AddSubscriptionPlanInstructionAccounts = {
  /** platform account */
  platform: PublicKey | Pda;
  /** update authority */
  authority?: Signer;
  /** mint account of a token that platform wants to support */
  tokenMint: PublicKey | Pda;
  /** token account of respective mint given above */
  tokenAccount: PublicKey | Pda;
};

// Data.
export type AddSubscriptionPlanInstructionData = {
  discriminator: Array<number>;
  plan: SubscriptionPlan;
};

export type AddSubscriptionPlanInstructionDataArgs = {
  plan: SubscriptionPlanArgs;
};

export function getAddSubscriptionPlanInstructionDataSerializer(): Serializer<
  AddSubscriptionPlanInstructionDataArgs,
  AddSubscriptionPlanInstructionData
> {
  return mapSerializer<
    AddSubscriptionPlanInstructionDataArgs,
    any,
    AddSubscriptionPlanInstructionData
  >(
    struct<AddSubscriptionPlanInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['plan', getSubscriptionPlanSerializer()],
      ],
      { description: 'AddSubscriptionPlanInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [35, 236, 167, 249, 243, 208, 86, 229],
    })
  ) as Serializer<
    AddSubscriptionPlanInstructionDataArgs,
    AddSubscriptionPlanInstructionData
  >;
}

// Args.
export type AddSubscriptionPlanInstructionArgs =
  AddSubscriptionPlanInstructionDataArgs;

// Instruction.
export function addSubscriptionPlan(
  context: Pick<Context, 'identity' | 'programs'>,
  input: AddSubscriptionPlanInstructionAccounts &
    AddSubscriptionPlanInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'dplProtocol',
    'ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    platform: { index: 0, isWritable: true, value: input.platform ?? null },
    authority: { index: 1, isWritable: false, value: input.authority ?? null },
    tokenMint: { index: 2, isWritable: false, value: input.tokenMint ?? null },
    tokenAccount: {
      index: 3,
      isWritable: false,
      value: input.tokenAccount ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: AddSubscriptionPlanInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAddSubscriptionPlanInstructionDataSerializer().serialize(
    resolvedArgs as AddSubscriptionPlanInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
