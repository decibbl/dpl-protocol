/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from "@metaplex-foundation/umi";
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from "@metaplex-foundation/umi/serializers";
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from "../shared";
import {
  Action,
  ActionArgs,
  SubscriptionDetails,
  SubscriptionDetailsArgs,
  getActionSerializer,
  getSubscriptionDetailsSerializer,
} from "../types";

// Accounts.
export type UpdateSubscriptionDetailsInstructionAccounts = {
  /** platform account */
  platform: PublicKey | Pda;
  /** update authority */
  authority?: Signer;
};

// Data.
export type UpdateSubscriptionDetailsInstructionData = {
  discriminator: Array<number>;
  subscriptionDetail: SubscriptionDetails;
  action: Action;
};

export type UpdateSubscriptionDetailsInstructionDataArgs = {
  subscriptionDetail: SubscriptionDetailsArgs;
  action: ActionArgs;
};

export function getUpdateSubscriptionDetailsInstructionDataSerializer(): Serializer<
  UpdateSubscriptionDetailsInstructionDataArgs,
  UpdateSubscriptionDetailsInstructionData
> {
  return mapSerializer<
    UpdateSubscriptionDetailsInstructionDataArgs,
    any,
    UpdateSubscriptionDetailsInstructionData
  >(
    struct<UpdateSubscriptionDetailsInstructionData>(
      [
        ["discriminator", array(u8(), { size: 8 })],
        ["subscriptionDetail", getSubscriptionDetailsSerializer()],
        ["action", getActionSerializer()],
      ],
      { description: "UpdateSubscriptionDetailsInstructionData" }
    ),
    (value) => ({
      ...value,
      discriminator: [192, 168, 245, 211, 158, 39, 119, 126],
    })
  ) as Serializer<
    UpdateSubscriptionDetailsInstructionDataArgs,
    UpdateSubscriptionDetailsInstructionData
  >;
}

// Args.
export type UpdateSubscriptionDetailsInstructionArgs =
  UpdateSubscriptionDetailsInstructionDataArgs;

// Instruction.
export function updateSubscriptionDetails(
  context: Pick<Context, "identity" | "programs">,
  input: UpdateSubscriptionDetailsInstructionAccounts &
    UpdateSubscriptionDetailsInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "dplProtocol",
    "ywpMZZNG3Nx1Bu2deJCcNxzUUoWSm6YwN9r9jCF8art"
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    platform: { index: 0, isWritable: true, value: input.platform ?? null },
    authority: { index: 1, isWritable: false, value: input.authority ?? null },
  };

  // Arguments.
  const resolvedArgs: UpdateSubscriptionDetailsInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    "programId",
    programId
  );

  // Data.
  const data =
    getUpdateSubscriptionDetailsInstructionDataSerializer().serialize(
      resolvedArgs as UpdateSubscriptionDetailsInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
